// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aria3ppp/watch-server/internal/repo (interfaces: RepositoryTx)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	models "github.com/aria3ppp/watch-server/internal/models"
	repo "github.com/aria3ppp/watch-server/internal/repo"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryTx is a mock of RepositoryTx interface.
type MockRepositoryTx struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryTxMockRecorder
}

// MockRepositoryTxMockRecorder is the mock recorder for MockRepositoryTx.
type MockRepositoryTxMockRecorder struct {
	mock *MockRepositoryTx
}

// NewMockRepositoryTx creates a new mock instance.
func NewMockRepositoryTx(ctrl *gomock.Controller) *MockRepositoryTx {
	mock := &MockRepositoryTx{ctrl: ctrl}
	mock.recorder = &MockRepositoryTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryTx) EXPECT() *MockRepositoryTxMockRecorder {
	return m.recorder
}

// EpisodeAuditsCount mocks base method.
func (m *MockRepositoryTx) EpisodeAuditsCount(arg0 context.Context, arg1, arg2, arg3 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodeAuditsCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodeAuditsCount indicates an expected call of EpisodeAuditsCount.
func (mr *MockRepositoryTxMockRecorder) EpisodeAuditsCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodeAuditsCount", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodeAuditsCount), arg0, arg1, arg2, arg3)
}

// EpisodeAuditsGetAll mocks base method.
func (m *MockRepositoryTx) EpisodeAuditsGetAll(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 int) ([]*models.FilmsAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodeAuditsGetAll", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*models.FilmsAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodeAuditsGetAll indicates an expected call of EpisodeAuditsGetAll.
func (mr *MockRepositoryTxMockRecorder) EpisodeAuditsGetAll(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodeAuditsGetAll", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodeAuditsGetAll), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EpisodeGet mocks base method.
func (m *MockRepositoryTx) EpisodeGet(arg0 context.Context, arg1, arg2, arg3 int) (*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodeGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodeGet indicates an expected call of EpisodeGet.
func (mr *MockRepositoryTxMockRecorder) EpisodeGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodeGet", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodeGet), arg0, arg1, arg2, arg3)
}

// EpisodeInvalidate mocks base method.
func (m *MockRepositoryTx) EpisodeInvalidate(arg0 context.Context, arg1, arg2, arg3, arg4 int, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodeInvalidate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EpisodeInvalidate indicates an expected call of EpisodeInvalidate.
func (mr *MockRepositoryTxMockRecorder) EpisodeInvalidate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodeInvalidate", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodeInvalidate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EpisodePut mocks base method.
func (m *MockRepositoryTx) EpisodePut(arg0 context.Context, arg1, arg2, arg3, arg4 int, arg5 *models.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodePut", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EpisodePut indicates an expected call of EpisodePut.
func (mr *MockRepositoryTxMockRecorder) EpisodePut(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodePut", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodePut), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EpisodeUpdate mocks base method.
func (m *MockRepositoryTx) EpisodeUpdate(arg0 context.Context, arg1, arg2, arg3, arg4 int, arg5 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodeUpdate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EpisodeUpdate indicates an expected call of EpisodeUpdate.
func (mr *MockRepositoryTxMockRecorder) EpisodeUpdate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodeUpdate", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodeUpdate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EpisodesAuditsCountBySeason mocks base method.
func (m *MockRepositoryTx) EpisodesAuditsCountBySeason(arg0 context.Context, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesAuditsCountBySeason", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesAuditsCountBySeason indicates an expected call of EpisodesAuditsCountBySeason.
func (mr *MockRepositoryTxMockRecorder) EpisodesAuditsCountBySeason(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesAuditsCountBySeason", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesAuditsCountBySeason), arg0, arg1, arg2)
}

// EpisodesAuditsCountBySeries mocks base method.
func (m *MockRepositoryTx) EpisodesAuditsCountBySeries(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesAuditsCountBySeries", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesAuditsCountBySeries indicates an expected call of EpisodesAuditsCountBySeries.
func (mr *MockRepositoryTxMockRecorder) EpisodesAuditsCountBySeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesAuditsCountBySeries", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesAuditsCountBySeries), arg0, arg1)
}

// EpisodesAuditsGetAllBySeason mocks base method.
func (m *MockRepositoryTx) EpisodesAuditsGetAllBySeason(arg0 context.Context, arg1, arg2, arg3, arg4 int) ([]*models.FilmsAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesAuditsGetAllBySeason", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.FilmsAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesAuditsGetAllBySeason indicates an expected call of EpisodesAuditsGetAllBySeason.
func (mr *MockRepositoryTxMockRecorder) EpisodesAuditsGetAllBySeason(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesAuditsGetAllBySeason", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesAuditsGetAllBySeason), arg0, arg1, arg2, arg3, arg4)
}

// EpisodesAuditsGetAllBySeries mocks base method.
func (m *MockRepositoryTx) EpisodesAuditsGetAllBySeries(arg0 context.Context, arg1, arg2, arg3 int) ([]*models.FilmsAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesAuditsGetAllBySeries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.FilmsAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesAuditsGetAllBySeries indicates an expected call of EpisodesAuditsGetAllBySeries.
func (mr *MockRepositoryTxMockRecorder) EpisodesAuditsGetAllBySeries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesAuditsGetAllBySeries", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesAuditsGetAllBySeries), arg0, arg1, arg2, arg3)
}

// EpisodesCountBySeason mocks base method.
func (m *MockRepositoryTx) EpisodesCountBySeason(arg0 context.Context, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesCountBySeason", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesCountBySeason indicates an expected call of EpisodesCountBySeason.
func (mr *MockRepositoryTxMockRecorder) EpisodesCountBySeason(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesCountBySeason", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesCountBySeason), arg0, arg1, arg2)
}

// EpisodesCountBySeries mocks base method.
func (m *MockRepositoryTx) EpisodesCountBySeries(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesCountBySeries", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesCountBySeries indicates an expected call of EpisodesCountBySeries.
func (mr *MockRepositoryTxMockRecorder) EpisodesCountBySeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesCountBySeries", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesCountBySeries), arg0, arg1)
}

// EpisodesGetAllBySeason mocks base method.
func (m *MockRepositoryTx) EpisodesGetAllBySeason(arg0 context.Context, arg1, arg2, arg3, arg4 int) ([]*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesGetAllBySeason", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesGetAllBySeason indicates an expected call of EpisodesGetAllBySeason.
func (mr *MockRepositoryTxMockRecorder) EpisodesGetAllBySeason(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesGetAllBySeason", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesGetAllBySeason), arg0, arg1, arg2, arg3, arg4)
}

// EpisodesGetAllBySeries mocks base method.
func (m *MockRepositoryTx) EpisodesGetAllBySeries(arg0 context.Context, arg1, arg2, arg3 int) ([]*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesGetAllBySeries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EpisodesGetAllBySeries indicates an expected call of EpisodesGetAllBySeries.
func (mr *MockRepositoryTxMockRecorder) EpisodesGetAllBySeries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesGetAllBySeries", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesGetAllBySeries), arg0, arg1, arg2, arg3)
}

// EpisodesInvalidateAllBySeason mocks base method.
func (m *MockRepositoryTx) EpisodesInvalidateAllBySeason(arg0 context.Context, arg1, arg2, arg3 int, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesInvalidateAllBySeason", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// EpisodesInvalidateAllBySeason indicates an expected call of EpisodesInvalidateAllBySeason.
func (mr *MockRepositoryTxMockRecorder) EpisodesInvalidateAllBySeason(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesInvalidateAllBySeason", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesInvalidateAllBySeason), arg0, arg1, arg2, arg3, arg4)
}

// EpisodesInvalidateAllBySeries mocks base method.
func (m *MockRepositoryTx) EpisodesInvalidateAllBySeries(arg0 context.Context, arg1, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EpisodesInvalidateAllBySeries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EpisodesInvalidateAllBySeries indicates an expected call of EpisodesInvalidateAllBySeries.
func (mr *MockRepositoryTxMockRecorder) EpisodesInvalidateAllBySeries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EpisodesInvalidateAllBySeries", reflect.TypeOf((*MockRepositoryTx)(nil).EpisodesInvalidateAllBySeries), arg0, arg1, arg2, arg3)
}

// MovieAuditsCount mocks base method.
func (m *MockRepositoryTx) MovieAuditsCount(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieAuditsCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAuditsCount indicates an expected call of MovieAuditsCount.
func (mr *MockRepositoryTxMockRecorder) MovieAuditsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAuditsCount", reflect.TypeOf((*MockRepositoryTx)(nil).MovieAuditsCount), arg0, arg1)
}

// MovieAuditsGetAll mocks base method.
func (m *MockRepositoryTx) MovieAuditsGetAll(arg0 context.Context, arg1, arg2, arg3 int) ([]*models.FilmsAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieAuditsGetAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.FilmsAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAuditsGetAll indicates an expected call of MovieAuditsGetAll.
func (mr *MockRepositoryTxMockRecorder) MovieAuditsGetAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAuditsGetAll", reflect.TypeOf((*MockRepositoryTx)(nil).MovieAuditsGetAll), arg0, arg1, arg2, arg3)
}

// MovieCreate mocks base method.
func (m *MockRepositoryTx) MovieCreate(arg0 context.Context, arg1 int, arg2 *models.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MovieCreate indicates an expected call of MovieCreate.
func (mr *MockRepositoryTxMockRecorder) MovieCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieCreate", reflect.TypeOf((*MockRepositoryTx)(nil).MovieCreate), arg0, arg1, arg2)
}

// MovieGet mocks base method.
func (m *MockRepositoryTx) MovieGet(arg0 context.Context, arg1 int) (*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieGet", arg0, arg1)
	ret0, _ := ret[0].(*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieGet indicates an expected call of MovieGet.
func (mr *MockRepositoryTxMockRecorder) MovieGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieGet", reflect.TypeOf((*MockRepositoryTx)(nil).MovieGet), arg0, arg1)
}

// MovieInvalidate mocks base method.
func (m *MockRepositoryTx) MovieInvalidate(arg0 context.Context, arg1, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieInvalidate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MovieInvalidate indicates an expected call of MovieInvalidate.
func (mr *MockRepositoryTxMockRecorder) MovieInvalidate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieInvalidate", reflect.TypeOf((*MockRepositoryTx)(nil).MovieInvalidate), arg0, arg1, arg2, arg3)
}

// MovieUpdate mocks base method.
func (m *MockRepositoryTx) MovieUpdate(arg0 context.Context, arg1, arg2 int, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovieUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MovieUpdate indicates an expected call of MovieUpdate.
func (mr *MockRepositoryTxMockRecorder) MovieUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieUpdate", reflect.TypeOf((*MockRepositoryTx)(nil).MovieUpdate), arg0, arg1, arg2, arg3)
}

// MoviesCount mocks base method.
func (m *MockRepositoryTx) MoviesCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoviesCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoviesCount indicates an expected call of MoviesCount.
func (mr *MockRepositoryTxMockRecorder) MoviesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoviesCount", reflect.TypeOf((*MockRepositoryTx)(nil).MoviesCount), arg0)
}

// MoviesGetAll mocks base method.
func (m *MockRepositoryTx) MoviesGetAll(arg0 context.Context, arg1, arg2 int) ([]*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoviesGetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoviesGetAll indicates an expected call of MoviesGetAll.
func (mr *MockRepositoryTxMockRecorder) MoviesGetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoviesGetAll", reflect.TypeOf((*MockRepositoryTx)(nil).MoviesGetAll), arg0, arg1, arg2)
}

// SeriesAuditsCount mocks base method.
func (m *MockRepositoryTx) SeriesAuditsCount(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesAuditsCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeriesAuditsCount indicates an expected call of SeriesAuditsCount.
func (mr *MockRepositoryTxMockRecorder) SeriesAuditsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesAuditsCount", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesAuditsCount), arg0, arg1)
}

// SeriesAuditsGetAll mocks base method.
func (m *MockRepositoryTx) SeriesAuditsGetAll(arg0 context.Context, arg1, arg2, arg3 int) ([]*models.SeriesesAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesAuditsGetAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.SeriesesAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeriesAuditsGetAll indicates an expected call of SeriesAuditsGetAll.
func (mr *MockRepositoryTxMockRecorder) SeriesAuditsGetAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesAuditsGetAll", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesAuditsGetAll), arg0, arg1, arg2, arg3)
}

// SeriesCreate mocks base method.
func (m *MockRepositoryTx) SeriesCreate(arg0 context.Context, arg1 int, arg2 *models.Series) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeriesCreate indicates an expected call of SeriesCreate.
func (mr *MockRepositoryTxMockRecorder) SeriesCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesCreate", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesCreate), arg0, arg1, arg2)
}

// SeriesGet mocks base method.
func (m *MockRepositoryTx) SeriesGet(arg0 context.Context, arg1 int) (*models.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesGet", arg0, arg1)
	ret0, _ := ret[0].(*models.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeriesGet indicates an expected call of SeriesGet.
func (mr *MockRepositoryTxMockRecorder) SeriesGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesGet", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesGet), arg0, arg1)
}

// SeriesInvalidate mocks base method.
func (m *MockRepositoryTx) SeriesInvalidate(arg0 context.Context, arg1, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesInvalidate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeriesInvalidate indicates an expected call of SeriesInvalidate.
func (mr *MockRepositoryTxMockRecorder) SeriesInvalidate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesInvalidate", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesInvalidate), arg0, arg1, arg2, arg3)
}

// SeriesUpdate mocks base method.
func (m *MockRepositoryTx) SeriesUpdate(arg0 context.Context, arg1, arg2 int, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeriesUpdate indicates an expected call of SeriesUpdate.
func (mr *MockRepositoryTxMockRecorder) SeriesUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesUpdate", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesUpdate), arg0, arg1, arg2, arg3)
}

// SeriesesCount mocks base method.
func (m *MockRepositoryTx) SeriesesCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesesCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeriesesCount indicates an expected call of SeriesesCount.
func (mr *MockRepositoryTxMockRecorder) SeriesesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesesCount", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesesCount), arg0)
}

// SeriesesGetAll mocks base method.
func (m *MockRepositoryTx) SeriesesGetAll(arg0 context.Context, arg1, arg2 int) ([]*models.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesesGetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeriesesGetAll indicates an expected call of SeriesesGetAll.
func (mr *MockRepositoryTxMockRecorder) SeriesesGetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesesGetAll", reflect.TypeOf((*MockRepositoryTx)(nil).SeriesesGetAll), arg0, arg1, arg2)
}

// Transaction mocks base method.
func (m *MockRepositoryTx) Transaction(arg0 context.Context, arg1 func(context.Context, repo.Service) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockRepositoryTxMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockRepositoryTx)(nil).Transaction), arg0, arg1)
}

// UserCreate mocks base method.
func (m *MockRepositoryTx) UserCreate(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockRepositoryTxMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockRepositoryTx)(nil).UserCreate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockRepositoryTx) UserDelete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockRepositoryTxMockRecorder) UserDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockRepositoryTx)(nil).UserDelete), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockRepositoryTx) UserGet(arg0 context.Context, arg1 int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockRepositoryTxMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockRepositoryTx)(nil).UserGet), arg0, arg1)
}

// UserGetByEmail mocks base method.
func (m *MockRepositoryTx) UserGetByEmail(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetByEmail indicates an expected call of UserGetByEmail.
func (mr *MockRepositoryTxMockRecorder) UserGetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByEmail", reflect.TypeOf((*MockRepositoryTx)(nil).UserGetByEmail), arg0, arg1)
}

// UserUpdate mocks base method.
func (m *MockRepositoryTx) UserUpdate(arg0 context.Context, arg1 int, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockRepositoryTxMockRecorder) UserUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockRepositoryTx)(nil).UserUpdate), arg0, arg1, arg2)
}

// UsersCount mocks base method.
func (m *MockRepositoryTx) UsersCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersCount indicates an expected call of UsersCount.
func (mr *MockRepositoryTxMockRecorder) UsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersCount", reflect.TypeOf((*MockRepositoryTx)(nil).UsersCount), arg0)
}
