// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package response

import (
	"fmt"
)

const (
	// StatusOK is a Status of type OK.
	StatusOK Status = iota
	// StatusNotFound is a Status of type NotFound.
	StatusNotFound
	// StatusInvalidURLParameter is a Status of type InvalidURLParameter.
	StatusInvalidURLParameter
	// StatusInvalidRequest is a Status of type InvalidRequest.
	StatusInvalidRequest
	// StatusEmailAlreadyUsed is a Status of type EmailAlreadyUsed.
	StatusEmailAlreadyUsed
	// StatusEmailNotFound is a Status of type EmailNotFound.
	StatusEmailNotFound
	// StatusIncorrectPassword is a Status of type IncorrectPassword.
	StatusIncorrectPassword
	// StatusSameNewPassword is a Status of type SameNewPassword.
	StatusSameNewPassword
	// StatusTokenInvalid is a Status of type TokenInvalid.
	StatusTokenInvalid
	// StatusTokenMissingOrMalformed is a Status of type TokenMissingOrMalformed.
	StatusTokenMissingOrMalformed
	// StatusInternalServerError is a Status of type InternalServerError.
	StatusInternalServerError
)

const _StatusName = "OKNotFoundInvalidURLParameterInvalidRequestEmailAlreadyUsedEmailNotFoundIncorrectPasswordSameNewPasswordTokenInvalidTokenMissingOrMalformedInternalServerError"

var _StatusMap = map[Status]string{
	StatusOK:                      _StatusName[0:2],
	StatusNotFound:                _StatusName[2:10],
	StatusInvalidURLParameter:     _StatusName[10:29],
	StatusInvalidRequest:          _StatusName[29:43],
	StatusEmailAlreadyUsed:        _StatusName[43:59],
	StatusEmailNotFound:           _StatusName[59:72],
	StatusIncorrectPassword:       _StatusName[72:89],
	StatusSameNewPassword:         _StatusName[89:104],
	StatusTokenInvalid:            _StatusName[104:116],
	StatusTokenMissingOrMalformed: _StatusName[116:139],
	StatusInternalServerError:     _StatusName[139:158],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:2]:     StatusOK,
	_StatusName[2:10]:    StatusNotFound,
	_StatusName[10:29]:   StatusInvalidURLParameter,
	_StatusName[29:43]:   StatusInvalidRequest,
	_StatusName[43:59]:   StatusEmailAlreadyUsed,
	_StatusName[59:72]:   StatusEmailNotFound,
	_StatusName[72:89]:   StatusIncorrectPassword,
	_StatusName[89:104]:  StatusSameNewPassword,
	_StatusName[104:116]: StatusTokenInvalid,
	_StatusName[116:139]: StatusTokenMissingOrMalformed,
	_StatusName[139:158]: StatusInternalServerError,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

// MarshalText implements the text marshaller method.
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
