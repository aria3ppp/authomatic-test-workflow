// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aria3ppp/watch-server/internal/token (interfaces: JWTInner)

// Package mock_jwtinner is a generated GoMock package.
package mock_jwtinner

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockJWTInner is a mock of JWTInner interface.
type MockJWTInner struct {
	ctrl     *gomock.Controller
	recorder *MockJWTInnerMockRecorder
}

// MockJWTInnerMockRecorder is the mock recorder for MockJWTInner.
type MockJWTInnerMockRecorder struct {
	mock *MockJWTInner
}

// NewMockJWTInner creates a new mock instance.
func NewMockJWTInner(ctrl *gomock.Controller) *MockJWTInner {
	mock := &MockJWTInner{ctrl: ctrl}
	mock.recorder = &MockJWTInnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTInner) EXPECT() *MockJWTInnerMockRecorder {
	return m.recorder
}

// ParseWithClaims mocks base method.
func (m *MockJWTInner) ParseWithClaims(arg0 string, arg1 jwt.Claims, arg2 jwt.Keyfunc, arg3 ...jwt.ParserOption) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseWithClaims", varargs...)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithClaims indicates an expected call of ParseWithClaims.
func (mr *MockJWTInnerMockRecorder) ParseWithClaims(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithClaims", reflect.TypeOf((*MockJWTInner)(nil).ParseWithClaims), varargs...)
}

// SignedString mocks base method.
func (m *MockJWTInner) SignedString(arg0 *jwt.Token, arg1 interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedString", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedString indicates an expected call of SignedString.
func (mr *MockJWTInnerMockRecorder) SignedString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedString", reflect.TypeOf((*MockJWTInner)(nil).SignedString), arg0, arg1)
}
