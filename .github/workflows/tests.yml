name: Tests

on: [push, pull_request]

env:
  pg_port: 5432
  pg_user: username
  pg_pass: password
  pg_db: db

jobs:

  build:
    runs-on: ubuntu-latest
    
    services:
    
      elasticsearch:
        image: elasticsearch:8.4.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          bootstrap.memory_lock: true
        ports:
          - 9200:9200
        options: --health-cmd "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'" --health-interval 10s --health-timeout 5s --health-retries 5
      
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{env.pg_user}}
          POSTGRES_PASSWORD: ${{env.pg_pass}}
          POSTGRES_PORT: ${{env.pg_port}}
          POSTGRES_DB: ${{env.pg_db}}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
        
    - name: fetch packages
      run: |
        go mod download
        go mod verify
    
    - name: Set envs
      run: |
        cat << EOF > .env
        # server envs
        SERVER_LOGFILE="log.txt"
        SERVER_PORT=8080
        SERVER_SECRET_KEY="secret_key"
        # postgresql database envs
        POSTGRES_USER="${{env.pg_user}}"
        POSTGRES_PASSWORD="${{env.pg_pass}}"
        POSTGRES_PORT="${{env.pg_port}}"
        POSTGRES_DB="${{env.pg_db}}"
        # environment variable used by elasticsearch client
        ELASTICSEARCH_URL="http://localhost:9200"
        ELASTICSEARCH_INDEX_POSTS="posts"
        EOF
        
#     - name: Build
#       run: go build -v ./...
    
    - name: Set sqlboiler conf file
      run: make set-sqlboiler

    - name: Test
      run: make test-all
